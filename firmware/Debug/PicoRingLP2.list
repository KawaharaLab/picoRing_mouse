
PicoRingLP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002880  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002968  08002968  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002970  08002970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002984  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c67  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000176e  00000000  00000000  00025cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00027450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f4  00000000  00000000  00027b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000104ec  00000000  00000000  00027ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bfd  00000000  00000000  000384e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061fa8  00000000  00000000  000410e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001634  00000000  00000000  000a3090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000a46c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002928 	.word	0x08002928

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002928 	.word	0x08002928

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_GPIO_Init>:
/** Configure pins
     PA4   ------> I2C1_SCL
     PA10   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b089      	sub	sp, #36	; 0x24
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	240c      	movs	r4, #12
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f002 fa09 	bl	80028d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b57      	ldr	r3, [pc, #348]	; (800061c <MX_GPIO_Init+0x174>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c2:	4b56      	ldr	r3, [pc, #344]	; (800061c <MX_GPIO_Init+0x174>)
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ca:	4b54      	ldr	r3, [pc, #336]	; (800061c <MX_GPIO_Init+0x174>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ce:	2204      	movs	r2, #4
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b51      	ldr	r3, [pc, #324]	; (800061c <MX_GPIO_Init+0x174>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004da:	4b50      	ldr	r3, [pc, #320]	; (800061c <MX_GPIO_Init+0x174>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	4b4e      	ldr	r3, [pc, #312]	; (800061c <MX_GPIO_Init+0x174>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b4b      	ldr	r3, [pc, #300]	; (800061c <MX_GPIO_Init+0x174>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f2:	4b4a      	ldr	r3, [pc, #296]	; (800061c <MX_GPIO_Init+0x174>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fa:	4b48      	ldr	r3, [pc, #288]	; (800061c <MX_GPIO_Init+0x174>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fe:	2202      	movs	r2, #2
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	0099      	lsls	r1, r3, #2
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2200      	movs	r2, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fff8 	bl	8001506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	01d2      	lsls	r2, r2, #7
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2288      	movs	r2, #136	; 0x88
 8000522:	0352      	lsls	r2, r2, #13
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052c:	193b      	adds	r3, r7, r4
 800052e:	4a3c      	ldr	r2, [pc, #240]	; (8000620 <MX_GPIO_Init+0x178>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f000 fe64 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000538:	0021      	movs	r1, r4
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000542:	000c      	movs	r4, r1
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000550:	193b      	adds	r3, r7, r4
 8000552:	4a33      	ldr	r2, [pc, #204]	; (8000620 <MX_GPIO_Init+0x178>)
 8000554:	0019      	movs	r1, r3
 8000556:	0010      	movs	r0, r2
 8000558:	f000 fe52 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2210      	movs	r2, #16
 8000560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2212      	movs	r2, #18
 8000566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2203      	movs	r2, #3
 8000572:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2203      	movs	r2, #3
 8000578:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	193a      	adds	r2, r7, r4
 800057c:	23a0      	movs	r3, #160	; 0xa0
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fe3c 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	22c2      	movs	r2, #194	; 0xc2
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2200      	movs	r2, #0
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	193b      	adds	r3, r7, r4
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <MX_GPIO_Init+0x17c>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f000 fe2d 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	000c      	movs	r4, r1
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	193a      	adds	r2, r7, r4
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fe17 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	00d2      	lsls	r2, r2, #3
 80005da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2212      	movs	r2, #18
 80005e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2203      	movs	r2, #3
 80005ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fdff 	bl	8001200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2007      	movs	r0, #7
 8000608:	f000 fdc8 	bl	800119c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800060c:	2007      	movs	r0, #7
 800060e:	f000 fdda 	bl	80011c6 <HAL_NVIC_EnableIRQ>

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b009      	add	sp, #36	; 0x24
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000
 8000620:	50000800 	.word	0x50000800
 8000624:	50000400 	.word	0x50000400

08000628 <MAX5394_SetResistance>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void MAX5394_SetResistance(uint8_t resistance)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	0002      	movs	r2, r0
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buffer[] = { 0x00, 0x1d, 0x3a, 0x59, 0x77, 0x94, 0xb3, 0xcf, 0xea, 0xff};
 8000634:	240c      	movs	r4, #12
 8000636:	193b      	adds	r3, r7, r4
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MAX5394_SetResistance+0x6c>)
 800063a:	ca03      	ldmia	r2!, {r0, r1}
 800063c:	c303      	stmia	r3!, {r0, r1}
 800063e:	8812      	ldrh	r2, [r2, #0]
 8000640:	801a      	strh	r2, [r3, #0]
    uint16_t data2 = (uint16_t)tx_buffer[resistance]; //
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	193a      	adds	r2, r7, r4
 8000648:	5cd3      	ldrb	r3, [r2, r3]
 800064a:	b29a      	uxth	r2, r3
 800064c:	240a      	movs	r4, #10
 800064e:	193b      	adds	r3, r7, r4
 8000650:	801a      	strh	r2, [r3, #0]
    data2 = data2 & 0x00FF; //
 8000652:	193b      	adds	r3, r7, r4
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	4013      	ands	r3, r2
 800065a:	b29a      	uxth	r2, r3
 800065c:	193b      	adds	r3, r7, r4
 800065e:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	0099      	lsls	r1, r3, #2
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2200      	movs	r2, #0
 800066a:	0018      	movs	r0, r3
 800066c:	f000 ff4b 	bl	8001506 <HAL_GPIO_WritePin>

	//uint8_t data2 = tx_buffer[resistance];
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&data2, 1, 10);
 8000670:	1939      	adds	r1, r7, r4
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MAX5394_SetResistance+0x70>)
 8000674:	230a      	movs	r3, #10
 8000676:	2201      	movs	r2, #1
 8000678:	f001 fef9 	bl	800246e <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, &data2, sizeof(data2), 10);

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	0099      	lsls	r1, r3, #2
 8000680:	23a0      	movs	r3, #160	; 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2201      	movs	r2, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f000 ff3d 	bl	8001506 <HAL_GPIO_WritePin>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b007      	add	sp, #28
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	08002940 	.word	0x08002940
 8000698:	20000034 	.word	0x20000034

0800069c <MAX5394_Shutdown>:
void MAX5394_Shutdown(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
    uint16_t SD_H_WREG = 0x9000; // 前八位是10010000，后八位是00000000
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MAX5394_Shutdown+0x78>)
 80006a6:	801a      	strh	r2, [r3, #0]
    uint16_t QP_OFF = 0xA000; // 前八位是10100000，后八位是00000000
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MAX5394_Shutdown+0x7c>)
 80006ac:	801a      	strh	r2, [r3, #0]

    // 发送第一个关闭序列
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	0099      	lsls	r1, r3, #2
 80006b2:	23a0      	movs	r3, #160	; 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2200      	movs	r2, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 ff24 	bl	8001506 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&SD_H_WREG, sizeof(SD_H_WREG), HAL_MAX_DELAY);
 80006be:	2301      	movs	r3, #1
 80006c0:	425b      	negs	r3, r3
 80006c2:	1db9      	adds	r1, r7, #6
 80006c4:	4815      	ldr	r0, [pc, #84]	; (800071c <MAX5394_Shutdown+0x80>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	f001 fed1 	bl	800246e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	0099      	lsls	r1, r3, #2
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2201      	movs	r2, #1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 ff15 	bl	8001506 <HAL_GPIO_WritePin>

    // 发送第二个关闭序列
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	0099      	lsls	r1, r3, #2
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2200      	movs	r2, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 ff0d 	bl	8001506 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&QP_OFF, sizeof(QP_OFF), HAL_MAX_DELAY);
 80006ec:	2301      	movs	r3, #1
 80006ee:	425b      	negs	r3, r3
 80006f0:	1d39      	adds	r1, r7, #4
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <MAX5394_Shutdown+0x80>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	f001 feba 	bl	800246e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	0099      	lsls	r1, r3, #2
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2201      	movs	r2, #1
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fefe 	bl	8001506 <HAL_GPIO_WritePin>
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	ffff9000 	.word	0xffff9000
 8000718:	ffffa000 	.word	0xffffa000
 800071c:	20000034 	.word	0x20000034

08000720 <MAX5394_Reset>:

void MAX5394_Reset(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    uint16_t reset_sequence = 0xC000; // 前八位是11000000，后八位是00000000
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MAX5394_Reset+0x44>)
 800072a:	801a      	strh	r2, [r3, #0]

    // 发送复位序列
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	0099      	lsls	r1, r3, #2
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2200      	movs	r2, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fee5 	bl	8001506 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&reset_sequence, sizeof(reset_sequence), HAL_MAX_DELAY);
 800073c:	2301      	movs	r3, #1
 800073e:	425b      	negs	r3, r3
 8000740:	1db9      	adds	r1, r7, #6
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MAX5394_Reset+0x48>)
 8000744:	2202      	movs	r2, #2
 8000746:	f001 fe92 	bl	800246e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	0099      	lsls	r1, r3, #2
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2201      	movs	r2, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fed6 	bl	8001506 <HAL_GPIO_WritePin>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	ffffc000 	.word	0xffffc000
 8000768:	20000034 	.word	0x20000034

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fbd3 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 fa51 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f7ff fe95 	bl	80004a8 <MX_GPIO_Init>
  //MX_LPUART1_UART_Init();
  MX_SPI1_Init();
 800077e:	f000 fad5 	bl	8000d2c <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  //__HAL_RCC_PWR_CLK_ENABLE();


  uint8_t counter = 3;
 8000782:	1d7b      	adds	r3, r7, #5
 8000784:	2203      	movs	r2, #3
 8000786:	701a      	strb	r2, [r3, #0]

  uint8_t left_counter = 0;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
  uint8_t right_counter = 0;
 8000790:	230e      	movs	r3, #14
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  uint8_t up_counter = 0;
 8000798:	230d      	movs	r3, #13
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  uint8_t down_counter = 0;
 80007a0:	230c      	movs	r3, #12
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  uint8_t zero_counter = 0;
 80007a8:	230b      	movs	r3, #11
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  uint8_t is_button_pressed = 0;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  uint8_t step = 0;
 80007b6:	230a      	movs	r3, #10
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

  GPIO_PinState left_state_prev = GPIO_PIN_RESET;
 80007be:	2309      	movs	r3, #9
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
  GPIO_PinState right_state_prev = GPIO_PIN_RESET;
 80007c6:	2308      	movs	r3, #8
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  GPIO_PinState up_state_prev = GPIO_PIN_RESET;
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  GPIO_PinState down_state_prev = GPIO_PIN_RESET;
 80007d4:	1dbb      	adds	r3, r7, #6
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]

  HAL_Delay(2000);
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fc0c 	bl	8000ffc <HAL_Delay>
  MAX5394_Shutdown();
 80007e4:	f7ff ff5a 	bl	800069c <MAX5394_Shutdown>
  HAL_Delay(2000);
 80007e8:	23fa      	movs	r3, #250	; 0xfa
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fc05 	bl	8000ffc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (interrupt_flag == 1) {
 80007f2:	4bd1      	ldr	r3, [pc, #836]	; (8000b38 <main+0x3cc>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10d      	bne.n	8000818 <main+0xac>
		  MAX5394_Reset();
 80007fc:	f7ff ff90 	bl	8000720 <MAX5394_Reset>
		  MAX5394_SetResistance(9);
 8000800:	2009      	movs	r0, #9
 8000802:	f7ff ff11 	bl	8000628 <MAX5394_SetResistance>
		  HAL_Delay(200);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f000 fbf8 	bl	8000ffc <HAL_Delay>
		  MAX5394_SetResistance(0);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff ff0b 	bl	8000628 <MAX5394_SetResistance>
		  interrupt_flag = 2;
 8000812:	4bc9      	ldr	r3, [pc, #804]	; (8000b38 <main+0x3cc>)
 8000814:	2202      	movs	r2, #2
 8000816:	701a      	strb	r2, [r3, #0]
	  }
	  if (interrupt_flag == 2) {
 8000818:	4bc7      	ldr	r3, [pc, #796]	; (8000b38 <main+0x3cc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b02      	cmp	r3, #2
 8000820:	d000      	beq.n	8000824 <main+0xb8>
 8000822:	e1f2      	b.n	8000c0a <main+0x49e>
		  //MAX5394_Reset();
		  //MAX5394_SetResistance();

	      // 获取当前时间
	      current_time = HAL_GetTick();
 8000824:	f000 fbe0 	bl	8000fe8 <HAL_GetTick>
 8000828:	0002      	movs	r2, r0
 800082a:	4bc4      	ldr	r3, [pc, #784]	; (8000b3c <main+0x3d0>)
 800082c:	601a      	str	r2, [r3, #0]
		  GPIO_PinState left_state_now = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7);
 800082e:	1cfc      	adds	r4, r7, #3
 8000830:	4bc3      	ldr	r3, [pc, #780]	; (8000b40 <main+0x3d4>)
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fe49 	bl	80014cc <HAL_GPIO_ReadPin>
 800083a:	0003      	movs	r3, r0
 800083c:	7023      	strb	r3, [r4, #0]
		  GPIO_PinState right_state_now = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6);;
 800083e:	1cbc      	adds	r4, r7, #2
 8000840:	4bbf      	ldr	r3, [pc, #764]	; (8000b40 <main+0x3d4>)
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fe41 	bl	80014cc <HAL_GPIO_ReadPin>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]
		  GPIO_PinState up_state_now = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 800084e:	1c7c      	adds	r4, r7, #1
 8000850:	4bbb      	ldr	r3, [pc, #748]	; (8000b40 <main+0x3d4>)
 8000852:	2102      	movs	r1, #2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fe39 	bl	80014cc <HAL_GPIO_ReadPin>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
		  GPIO_PinState down_state_now = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 800085e:	003c      	movs	r4, r7
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	4ab7      	ldr	r2, [pc, #732]	; (8000b44 <main+0x3d8>)
 8000866:	0019      	movs	r1, r3
 8000868:	0010      	movs	r0, r2
 800086a:	f000 fe2f 	bl	80014cc <HAL_GPIO_ReadPin>
 800086e:	0003      	movs	r3, r0
 8000870:	7023      	strb	r3, [r4, #0]
//		  GPIO_PinState button_state_now = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14);

	      // 检查left_state_now是否等于left_state_prev
	      if (up_state_now == up_state_prev &&
 8000872:	1c7a      	adds	r2, r7, #1
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d126      	bne.n	80008cc <main+0x160>
 800087e:	003a      	movs	r2, r7
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d120      	bne.n	80008cc <main+0x160>
	          down_state_now == down_state_prev &&
 800088a:	1cfa      	adds	r2, r7, #3
 800088c:	2309      	movs	r3, #9
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d119      	bne.n	80008cc <main+0x160>
	          left_state_now == left_state_prev &&
 8000898:	1cba      	adds	r2, r7, #2
 800089a:	2308      	movs	r3, #8
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d112      	bne.n	80008cc <main+0x160>
              right_state_now == right_state_prev) {
	      // 如果相等，并且时间达到5秒，则重置标志位并进入STOP模式
	    	  if (current_time - last_change_time >= WAIT_TIME) {
 80008a6:	4ba5      	ldr	r3, [pc, #660]	; (8000b3c <main+0x3d0>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4ba7      	ldr	r3, [pc, #668]	; (8000b48 <main+0x3dc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	4aa6      	ldr	r2, [pc, #664]	; (8000b4c <main+0x3e0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d800      	bhi.n	80008b8 <main+0x14c>
 80008b6:	e1ac      	b.n	8000c12 <main+0x4a6>
	    		  interrupt_flag = 0; // 重置标志位
 80008b8:	4b9f      	ldr	r3, [pc, #636]	; (8000b38 <main+0x3cc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	    		  MAX5394_Shutdown();
 80008be:	f7ff feed 	bl	800069c <MAX5394_Shutdown>
	              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80008c2:	2101      	movs	r1, #1
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fe57 	bl	8001578 <HAL_PWR_EnterSTOPMode>
	    	  if (current_time - last_change_time >= WAIT_TIME) {
 80008ca:	e1a2      	b.n	8000c12 <main+0x4a6>
	    	  }
	       } else {
	        	  // update scroll & button state
	        	  if (left_state_now != left_state_prev){
 80008cc:	1cfa      	adds	r2, r7, #3
 80008ce:	2309      	movs	r3, #9
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d006      	beq.n	80008e8 <main+0x17c>
	        		  left_counter++;
 80008da:	210f      	movs	r1, #15
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	3201      	adds	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e02d      	b.n	8000944 <main+0x1d8>
	        	  } else if (right_state_now != right_state_prev){
 80008e8:	1cba      	adds	r2, r7, #2
 80008ea:	2308      	movs	r3, #8
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d006      	beq.n	8000904 <main+0x198>
	        		  right_counter++;
 80008f6:	210e      	movs	r1, #14
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	3201      	adds	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e01f      	b.n	8000944 <main+0x1d8>
	        	  } else if (up_state_now != up_state_prev){
 8000904:	1c7a      	adds	r2, r7, #1
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d006      	beq.n	800091e <main+0x1b2>
	        		  up_counter++;
 8000910:	210d      	movs	r1, #13
 8000912:	187b      	adds	r3, r7, r1
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	187b      	adds	r3, r7, r1
 8000918:	3201      	adds	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e012      	b.n	8000944 <main+0x1d8>
	        	  } else if (down_state_now != down_state_prev){
 800091e:	003a      	movs	r2, r7
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	d006      	beq.n	8000938 <main+0x1cc>
	        		  down_counter++;
 800092a:	210c      	movs	r1, #12
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	3201      	adds	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e005      	b.n	8000944 <main+0x1d8>
//	        	  } else if (button_state_now == GPIO_PIN_RESET) {
//	        		  is_button_pressed = 1;
	        	  } else {
	        			zero_counter++;
 8000938:	210b      	movs	r1, #11
 800093a:	187b      	adds	r3, r7, r1
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	187b      	adds	r3, r7, r1
 8000940:	3201      	adds	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	        	  }

	        	  // Clear all counters if any wrong direction is triggered
	        	  if (left_counter > 0 && (right_counter > 0 || up_counter > 0 || down_counter > 0)) {
 8000944:	230f      	movs	r3, #15
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d022      	beq.n	8000994 <main+0x228>
 800094e:	230e      	movs	r3, #14
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <main+0x200>
 8000958:	230d      	movs	r3, #13
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <main+0x200>
 8000962:	230c      	movs	r3, #12
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d013      	beq.n	8000994 <main+0x228>
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 800096c:	210c      	movs	r1, #12
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	200d      	movs	r0, #13
 8000976:	183b      	adds	r3, r7, r0
 8000978:	187a      	adds	r2, r7, r1
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	210e      	movs	r1, #14
 8000980:	187b      	adds	r3, r7, r1
 8000982:	183a      	adds	r2, r7, r0
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	187a      	adds	r2, r7, r1
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e076      	b.n	8000a82 <main+0x316>
	        	  } else if (right_counter > 0 && (left_counter > 0 || up_counter > 0 || down_counter > 0)) {
 8000994:	230e      	movs	r3, #14
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d022      	beq.n	80009e4 <main+0x278>
 800099e:	230f      	movs	r3, #15
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <main+0x250>
 80009a8:	230d      	movs	r3, #13
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <main+0x250>
 80009b2:	230c      	movs	r3, #12
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d013      	beq.n	80009e4 <main+0x278>
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 80009bc:	210c      	movs	r1, #12
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	200d      	movs	r0, #13
 80009c6:	183b      	adds	r3, r7, r0
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	210e      	movs	r1, #14
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	183a      	adds	r2, r7, r0
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e04e      	b.n	8000a82 <main+0x316>
	        	  } else if (up_counter > 0 && (left_counter > 0 || right_counter > 0 || down_counter > 0)) {
 80009e4:	230d      	movs	r3, #13
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d022      	beq.n	8000a34 <main+0x2c8>
 80009ee:	230f      	movs	r3, #15
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <main+0x2a0>
 80009f8:	230e      	movs	r3, #14
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <main+0x2a0>
 8000a02:	230c      	movs	r3, #12
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <main+0x2c8>
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	200d      	movs	r0, #13
 8000a16:	183b      	adds	r3, r7, r0
 8000a18:	187a      	adds	r2, r7, r1
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	210e      	movs	r1, #14
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	183a      	adds	r2, r7, r0
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e026      	b.n	8000a82 <main+0x316>
	        	  } else if (down_counter > 0 && (left_counter > 0 || right_counter > 0 || up_counter > 0)) {
 8000a34:	230c      	movs	r3, #12
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d021      	beq.n	8000a82 <main+0x316>
 8000a3e:	230f      	movs	r3, #15
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <main+0x2f0>
 8000a48:	230e      	movs	r3, #14
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <main+0x2f0>
 8000a52:	230d      	movs	r3, #13
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d012      	beq.n	8000a82 <main+0x316>
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	200d      	movs	r0, #13
 8000a66:	183b      	adds	r3, r7, r0
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	7812      	ldrb	r2, [r2, #0]
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	210e      	movs	r1, #14
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	183a      	adds	r2, r7, r0
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	187a      	adds	r2, r7, r1
 8000a7e:	7812      	ldrb	r2, [r2, #0]
 8000a80:	701a      	strb	r2, [r3, #0]
	        	  }

	        	  if (left_counter >= counter) {
 8000a82:	210f      	movs	r1, #15
 8000a84:	187a      	adds	r2, r7, r1
 8000a86:	1d7b      	adds	r3, r7, #5
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d316      	bcc.n	8000abe <main+0x352>
	        		  step = 2;
 8000a90:	230a      	movs	r3, #10
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	2202      	movs	r2, #2
 8000a96:	701a      	strb	r2, [r3, #0]
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000a98:	200c      	movs	r0, #12
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	240d      	movs	r4, #13
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	183a      	adds	r2, r7, r0
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	200e      	movs	r0, #14
 8000aac:	183b      	adds	r3, r7, r0
 8000aae:	193a      	adds	r2, r7, r4
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	183a      	adds	r2, r7, r0
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e082      	b.n	8000bc4 <main+0x458>
	        	  } else if (right_counter >= counter) {
 8000abe:	210e      	movs	r1, #14
 8000ac0:	187a      	adds	r2, r7, r1
 8000ac2:	1d7b      	adds	r3, r7, #5
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d316      	bcc.n	8000afa <main+0x38e>
	        		  step = 4;
 8000acc:	230a      	movs	r3, #10
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	701a      	strb	r2, [r3, #0]
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000ad4:	200c      	movs	r0, #12
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	240d      	movs	r4, #13
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	183a      	adds	r2, r7, r0
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	193a      	adds	r2, r7, r4
 8000aea:	7812      	ldrb	r2, [r2, #0]
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	230f      	movs	r3, #15
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e064      	b.n	8000bc4 <main+0x458>
	        	  } else if (up_counter >= counter) {
 8000afa:	210d      	movs	r1, #13
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	1d7b      	adds	r3, r7, #5
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d323      	bcc.n	8000b50 <main+0x3e4>
	        		  step = 6;
 8000b08:	230a      	movs	r3, #10
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	701a      	strb	r2, [r3, #0]
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000b10:	200c      	movs	r0, #12
 8000b12:	183b      	adds	r3, r7, r0
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	183a      	adds	r2, r7, r0
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	200e      	movs	r0, #14
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	183a      	adds	r2, r7, r0
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e046      	b.n	8000bc4 <main+0x458>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000028 	.word	0x20000028
 8000b3c:	20000030 	.word	0x20000030
 8000b40:	50000400 	.word	0x50000400
 8000b44:	50000800 	.word	0x50000800
 8000b48:	2000002c 	.word	0x2000002c
 8000b4c:	00001b57 	.word	0x00001b57
	        	  } else if (down_counter >= counter) {
 8000b50:	210c      	movs	r1, #12
 8000b52:	187a      	adds	r2, r7, r1
 8000b54:	1d7b      	adds	r3, r7, #5
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d316      	bcc.n	8000b8c <main+0x420>
	        		  step = 8;
 8000b5e:	230a      	movs	r3, #10
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2208      	movs	r2, #8
 8000b64:	701a      	strb	r2, [r3, #0]
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	200d      	movs	r0, #13
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	210e      	movs	r1, #14
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	183a      	adds	r2, r7, r0
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	187a      	adds	r2, r7, r1
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e01b      	b.n	8000bc4 <main+0x458>
	        	  } else if (zero_counter >= 20){
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b13      	cmp	r3, #19
 8000b94:	d916      	bls.n	8000bc4 <main+0x458>
	        		  step = 0;
 8000b96:	230a      	movs	r3, #10
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
	        		  left_counter = right_counter = up_counter = down_counter = 0;
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	200d      	movs	r0, #13
 8000ba8:	183b      	adds	r3, r7, r0
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	210e      	movs	r1, #14
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	183a      	adds	r2, r7, r0
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	701a      	strb	r2, [r3, #0]
//	        		  step = 9;
//	        		  is_button_pressed = 0;
//	        		  left_counter = right_counter = up_counter = down_counter = 0;
	        	  }

	        	  MAX5394_SetResistance(step);
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fd2c 	bl	8000628 <MAX5394_SetResistance>
	        	  //HAL_Delay(200);
	        	  MAX5394_SetResistance(0);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fd29 	bl	8000628 <MAX5394_SetResistance>
	        	  // Update previous states
	        	  left_state_prev = left_state_now;
 8000bd6:	2309      	movs	r3, #9
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	1cfa      	adds	r2, r7, #3
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
	        	  right_state_prev = right_state_now;
 8000be0:	2308      	movs	r3, #8
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	1cba      	adds	r2, r7, #2
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	701a      	strb	r2, [r3, #0]
	        	  up_state_prev = up_state_now;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	1c7a      	adds	r2, r7, #1
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	701a      	strb	r2, [r3, #0]
	        	  down_state_prev = down_state_now;
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	003a      	movs	r2, r7
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
	        	  // 如果不相等，更新last_change_time
	              last_change_time = current_time;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <main+0x4a8>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <main+0x4ac>)
 8000c00:	601a      	str	r2, [r3, #0]
	              HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f000 f9fa 	bl	8000ffc <HAL_Delay>
 8000c08:	e5f3      	b.n	80007f2 <main+0x86>
	          }
	  } else {
	      // 进入STOP模式
	      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fcb3 	bl	8001578 <HAL_PWR_EnterSTOPMode>
	  if (interrupt_flag == 1) {
 8000c12:	e5ee      	b.n	80007f2 <main+0x86>
 8000c14:	20000030 	.word	0x20000030
 8000c18:	2000002c 	.word	0x2000002c

08000c1c <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b099      	sub	sp, #100	; 0x64
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	242c      	movs	r4, #44	; 0x2c
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0018      	movs	r0, r3
 8000c28:	2334      	movs	r3, #52	; 0x34
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f001 fe4f 	bl	80028d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c32:	2318      	movs	r3, #24
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2314      	movs	r3, #20
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f001 fe47 	bl	80028d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c42:	003b      	movs	r3, r7
 8000c44:	0018      	movs	r0, r3
 8000c46:	2318      	movs	r3, #24
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f001 fe40 	bl	80028d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <SystemClock_Config+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <SystemClock_Config+0xd4>)
 8000c56:	401a      	ands	r2, r3
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <SystemClock_Config+0xd0>)
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	0109      	lsls	r1, r1, #4
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c62:	0021      	movs	r1, r4
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2210      	movs	r2, #16
 8000c68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_3;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	22c0      	movs	r2, #192	; 0xc0
 8000c7a:	01d2      	lsls	r2, r2, #7
 8000c7c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fcd2 	bl	8001630 <HAL_RCC_OscConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c90:	f000 f846 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	2118      	movs	r1, #24
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220f      	movs	r2, #15
 8000c9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f835 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cc2:	f000 f82d 	bl	8000d20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2204      	movs	r2, #4
 8000cca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fa14 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ce0:	f000 f81e 	bl	8000d20 <Error_Handler>
  }
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b019      	add	sp, #100	; 0x64
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	ffffe7ff 	.word	0xffffe7ff

08000cf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	801a      	strh	r2, [r3, #0]
// 确认是否是pin 14的中断
  if (GPIO_Pin == GPIO_PIN_14)
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	01db      	lsls	r3, r3, #7
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d102      	bne.n	8000d12 <HAL_GPIO_EXTI_Callback+0x1e>
  //if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET)
  {
	 //HAL_ResumeTick();
	 interrupt_flag = 1;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
     //MAX5394_SetResistance(0);
     //__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
     //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
     // 可以在这里再次配置MCU进入STOP模式，或者返回主循环自动进入
  }
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000028 	.word	0x20000028

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <MX_SPI1_Init+0x6c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d38:	2282      	movs	r2, #130	; 0x82
 8000d3a:	0052      	lsls	r2, r2, #1
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d62:	2238      	movs	r2, #56	; 0x38
 8000d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_SPI1_Init+0x68>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 faeb 	bl	800235c <HAL_SPI_Init>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d8a:	f7ff ffc9 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000034 	.word	0x20000034
 8000d98:	40013000 	.word	0x40013000

08000d9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	240c      	movs	r4, #12
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f001 fd8e 	bl	80028d0 <memset>
  if(spiHandle->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_SPI_MspInit+0x80>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d129      	bne.n	8000e12 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0149      	lsls	r1, r1, #5
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000de4:	0021      	movs	r1, r4
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	22a0      	movs	r2, #160	; 0xa0
 8000dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	187a      	adds	r2, r7, r1
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 f9f7 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b009      	add	sp, #36	; 0x24
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40013000 	.word	0x40013000
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_MspInit+0x24>)
 8000e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x24>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_MspInit+0x24>)
 8000e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_MspInit+0x24>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	0549      	lsls	r1, r1, #21
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8a8 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
//
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fb5c 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
//
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff fff7 	bl	8000e8e <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <LoopForever+0x6>)
    LDR R1, [R0]
 8000ea2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ea4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <LoopForever+0xa>)
    CMP R1, R2
 8000ea8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000eaa:	d105      	bne.n	8000eb8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000eae:	4912      	ldr	r1, [pc, #72]	; (8000ef8 <LoopForever+0x12>)
    STR R1, [R0]
 8000eb0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000eb4:	4912      	ldr	r1, [pc, #72]	; (8000f00 <LoopForever+0x1a>)
    STR R1, [R0]
 8000eb6:	6001      	str	r1, [r0, #0]

08000eb8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	4812      	ldr	r0, [pc, #72]	; (8000f04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000eba:	4913      	ldr	r1, [pc, #76]	; (8000f08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <LoopForever+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ed0:	4c10      	ldr	r4, [pc, #64]	; (8000f14 <LoopForever+0x2e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f001 fcff 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fc43 	bl	800076c <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
   ldr   r0, =_estack
 8000ee8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000eec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ef0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000ef4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000ef8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000efc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f0c:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f14:	20000090 	.word	0x20000090

08000f18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_COMP_IRQHandler>
	...

08000f1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x3c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Init+0x3c>)
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f811 	bl	8000f5c <HAL_InitTick>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e001      	b.n	8000f4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f46:	f7ff ff6d 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	0098      	lsls	r0, r3, #2
 8000f72:	f7ff f8c9 	bl	8000108 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f7ff f8c4 	bl	8000108 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f92f 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00f      	b.n	8000fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d80b      	bhi.n	8000fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f8fc 	bl	800119c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_InitTick+0x64>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d2      	adds	r2, r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	2000008c 	.word	0x2000008c

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001a      	movs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	189b      	adds	r3, r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	0002      	movs	r2, r0
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b7f      	cmp	r3, #127	; 0x7f
 8001056:	d809      	bhi.n	800106c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	001a      	movs	r2, r3
 800105e:	231f      	movs	r3, #31
 8001060:	401a      	ands	r2, r3
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_EnableIRQ+0x30>)
 8001064:	2101      	movs	r1, #1
 8001066:	4091      	lsls	r1, r2
 8001068:	000a      	movs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
  }
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	d828      	bhi.n	80010e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <__NVIC_SetPriority+0xd4>)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	33c0      	adds	r3, #192	; 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	589b      	ldr	r3, [r3, r2]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <__NVIC_SetPriority+0xd4>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010de:	e031      	b.n	8001144 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0019      	movs	r1, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	400b      	ands	r3, r1
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3306      	adds	r3, #6
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	3304      	adds	r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	0011      	movs	r1, r2
 8001100:	2203      	movs	r2, #3
 8001102:	400a      	ands	r2, r1
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	21ff      	movs	r1, #255	; 0xff
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	401a      	ands	r2, r3
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4003      	ands	r3, r0
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	001c      	movs	r4, r3
 8001130:	230f      	movs	r3, #15
 8001132:	4023      	ands	r3, r4
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	430a      	orrs	r2, r1
 800113a:	3306      	adds	r3, #6
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b003      	add	sp, #12
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	045b      	lsls	r3, r3, #17
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2301      	movs	r3, #1
 800116a:	e010      	b.n	800118e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SysTick_Config+0x44>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	3a01      	subs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2103      	movs	r1, #3
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff7c 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x44>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x44>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	210f      	movs	r1, #15
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	0002      	movs	r2, r0
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff33 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ffaf 	bl	8001154 <SysTick_Config>
 80011f6:	0003      	movs	r3, r0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001216:	e143      	b.n	80014a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <HAL_GPIO_Init+0x30>
 800122e:	e134      	b.n	800149a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	4013      	ands	r3, r2
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	2201      	movs	r2, #1
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2203      	movs	r2, #3
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	58d3      	ldr	r3, [r2, r3]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2207      	movs	r2, #7
 8001304:	4013      	ands	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2107      	movs	r1, #7
 800131e:	400b      	ands	r3, r1
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	401a      	ands	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_GPIO_Init+0x17c>
 800137a:	e08e      	b.n	800149a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001382:	2101      	movs	r1, #1
 8001384:	430a      	orrs	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x2bc>)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	589b      	ldr	r3, [r3, r2]
 8001394:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	43da      	mvns	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1d2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <HAL_GPIO_Init+0x2c0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1ce>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a40      	ldr	r2, [pc, #256]	; (80014c4 <HAL_GPIO_Init+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1ca>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x1d4>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x1d4>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x1d4>
 80013d2:	2300      	movs	r3, #0
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	2103      	movs	r1, #3
 80013d8:	400a      	ands	r2, r1
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_GPIO_Init+0x2bc>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	035b      	lsls	r3, r3, #13
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4013      	ands	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	1e13      	subs	r3, r2, #0
 80014aa:	d000      	beq.n	80014ae <HAL_GPIO_Init+0x2ae>
 80014ac:	e6b4      	b.n	8001218 <HAL_GPIO_Init+0x18>
  }
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b006      	add	sp, #24
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	50000400 	.word	0x50000400
 80014c4:	50000800 	.word	0x50000800
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	000a      	movs	r2, r1
 80014d6:	1cbb      	adds	r3, r7, #2
 80014d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	1cba      	adds	r2, r7, #2
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	4013      	ands	r3, r2
 80014e4:	d004      	beq.n	80014f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014e6:	230f      	movs	r3, #15
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e003      	b.n	80014f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	781b      	ldrb	r3, [r3, #0]
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	0008      	movs	r0, r1
 8001510:	0011      	movs	r1, r2
 8001512:	1cbb      	adds	r3, r7, #2
 8001514:	1c02      	adds	r2, r0, #0
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	1c7b      	adds	r3, r7, #1
 800151a:	1c0a      	adds	r2, r1, #0
 800151c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151e:	1c7b      	adds	r3, r7, #1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	1cbb      	adds	r3, r7, #2
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800152e:	e003      	b.n	8001538 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001530:	1cbb      	adds	r3, r7, #2
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	0002      	movs	r2, r0
 8001548:	1dbb      	adds	r3, r7, #6
 800154a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	1dba      	adds	r2, r7, #6
 8001552:	8812      	ldrh	r2, [r2, #0]
 8001554:	4013      	ands	r3, r2
 8001556:	d008      	beq.n	800156a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800155a:	1dba      	adds	r2, r7, #6
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fbc5 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	000a      	movs	r2, r1
 8001582:	1cfb      	adds	r3, r7, #3
 8001584:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_PWR_EnterSTOPMode+0xac>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <HAL_PWR_EnterSTOPMode+0x40>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 80015b2:	491d      	ldr	r1, [pc, #116]	; (8001628 <HAL_PWR_EnterSTOPMode+0xb0>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2203      	movs	r2, #3
 80015c2:	4393      	bics	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_PWR_EnterSTOPMode+0xb4>)
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_PWR_EnterSTOPMode+0xb4>)
 80015da:	2104      	movs	r1, #4
 80015dc:	430a      	orrs	r2, r1
 80015de:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80015e0:	1cfb      	adds	r3, r7, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015e8:	bf30      	wfi
 80015ea:	e002      	b.n	80015f2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015ec:	bf40      	sev
    __WFE();
 80015ee:	bf20      	wfe
    __WFE();
 80015f0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_PWR_EnterSTOPMode+0xb4>)
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_PWR_EnterSTOPMode+0xb4>)
 80015f8:	2104      	movs	r1, #4
 80015fa:	438a      	bics	r2, r1
 80015fc:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_PWR_EnterSTOPMode+0xa0>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0089      	lsls	r1, r1, #2
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
  }
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40007000 	.word	0x40007000
 8001624:	40010000 	.word	0x40010000
 8001628:	fffffdff 	.word	0xfffffdff
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	f000 fb6c 	bl	8001d1c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001644:	4bc8      	ldr	r3, [pc, #800]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	220c      	movs	r2, #12
 800164a:	4013      	ands	r3, r2
 800164c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164e:	4bc6      	ldr	r3, [pc, #792]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2201      	movs	r2, #1
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x36>
 8001664:	e07d      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d112      	bne.n	8001698 <HAL_RCC_OscConfig+0x68>
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	429a      	cmp	r2, r3
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4bba      	ldr	r3, [pc, #744]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x5a>
 8001688:	e06a      	b.n	8001760 <HAL_RCC_OscConfig+0x130>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d166      	bne.n	8001760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f000 fb42 	bl	8001d1c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x84>
 80016a4:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4baf      	ldr	r3, [pc, #700]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0249      	lsls	r1, r1, #9
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e027      	b.n	8001704 <HAL_RCC_OscConfig+0xd4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	23a0      	movs	r3, #160	; 0xa0
 80016ba:	02db      	lsls	r3, r3, #11
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10e      	bne.n	80016de <HAL_RCC_OscConfig+0xae>
 80016c0:	4ba9      	ldr	r3, [pc, #676]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	02c9      	lsls	r1, r1, #11
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4ba5      	ldr	r3, [pc, #660]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0249      	lsls	r1, r1, #9
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e012      	b.n	8001704 <HAL_RCC_OscConfig+0xd4>
 80016de:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016e4:	49a1      	ldr	r1, [pc, #644]	; (800196c <HAL_RCC_OscConfig+0x33c>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b9f      	ldr	r3, [pc, #636]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80016fe:	499c      	ldr	r1, [pc, #624]	; (8001970 <HAL_RCC_OscConfig+0x340>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d014      	beq.n	8001736 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fc6c 	bl	8000fe8 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001716:	f7ff fc67 	bl	8000fe8 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e2f9      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0xe6>
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fc57 	bl	8000fe8 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc52 	bl	8000fe8 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2e4      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001752:	4b85      	ldr	r3, [pc, #532]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x110>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCC_OscConfig+0x13e>
 800176c:	e099      	b.n	80018a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	2220      	movs	r2, #32
 8001778:	4013      	ands	r3, r2
 800177a:	d009      	beq.n	8001790 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800177c:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b79      	ldr	r3, [pc, #484]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001782:	2120      	movs	r1, #32
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	2220      	movs	r2, #32
 800178c:	4393      	bics	r3, r2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b04      	cmp	r3, #4
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d13e      	bne.n	800181a <HAL_RCC_OscConfig+0x1ea>
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d13b      	bne.n	800181a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017a2:	4b71      	ldr	r3, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2204      	movs	r2, #4
 80017a8:	4013      	ands	r3, r2
 80017aa:	d004      	beq.n	80017b6 <HAL_RCC_OscConfig+0x186>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e2b2      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x344>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2209      	movs	r2, #9
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	4b64      	ldr	r3, [pc, #400]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 fbeb 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 80017e2:	0001      	movs	r1, r0
 80017e4:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	220f      	movs	r2, #15
 80017ec:	4013      	ands	r3, r2
 80017ee:	4a62      	ldr	r2, [pc, #392]	; (8001978 <HAL_RCC_OscConfig+0x348>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	000a      	movs	r2, r1
 80017f4:	40da      	lsrs	r2, r3
 80017f6:	4b61      	ldr	r3, [pc, #388]	; (800197c <HAL_RCC_OscConfig+0x34c>)
 80017f8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x350>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2513      	movs	r5, #19
 8001800:	197c      	adds	r4, r7, r5
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fbaa 	bl	8000f5c <HAL_InitTick>
 8001808:	0003      	movs	r3, r0
 800180a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800180c:	197b      	adds	r3, r7, r5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d046      	beq.n	80018a2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001814:	197b      	adds	r3, r7, r5
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	e280      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	2b00      	cmp	r3, #0
 800181e:	d027      	beq.n	8001870 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2209      	movs	r2, #9
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fbd9 	bl	8000fe8 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fbd4 	bl	8000fe8 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e266      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d0f1      	beq.n	800183c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a45      	ldr	r2, [pc, #276]	; (8001974 <HAL_RCC_OscConfig+0x344>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	021a      	lsls	r2, r3, #8
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e018      	b.n	80018a2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001876:	2101      	movs	r1, #1
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fbb4 	bl	8000fe8 <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fbaf 	bl	8000fe8 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e241      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2204      	movs	r2, #4
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f1      	bne.n	8001886 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2210      	movs	r2, #16
 80018a8:	4013      	ands	r3, r2
 80018aa:	d100      	bne.n	80018ae <HAL_RCC_OscConfig+0x27e>
 80018ac:	e0a1      	b.n	80019f2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d140      	bne.n	8001936 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x29c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e227      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <HAL_RCC_OscConfig+0x354>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	0a19      	lsrs	r1, r3, #8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	061a      	lsls	r2, r3, #24
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	0b5b      	lsrs	r3, r3, #13
 80018fa:	3301      	adds	r3, #1
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	0212      	lsls	r2, r2, #8
 8001900:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	210f      	movs	r1, #15
 800190a:	400b      	ands	r3, r1
 800190c:	491a      	ldr	r1, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x348>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x34c>)
 8001914:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_RCC_OscConfig+0x350>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2513      	movs	r5, #19
 800191c:	197c      	adds	r4, r7, r5
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff fb1c 	bl	8000f5c <HAL_InitTick>
 8001924:	0003      	movs	r3, r0
 8001926:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001928:	197b      	adds	r3, r7, r5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d060      	beq.n	80019f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001930:	197b      	adds	r3, r7, r5
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	e1f2      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03f      	beq.n	80019be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0049      	lsls	r1, r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fb4c 	bl	8000fe8 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001954:	e018      	b.n	8001988 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001956:	f7ff fb47 	bl	8000fe8 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d911      	bls.n	8001988 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1d9      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	ffffe0ff 	.word	0xffffe0ff
 8001978:	0800294c 	.word	0x0800294c
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004
 8001984:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001988:	4bc9      	ldr	r3, [pc, #804]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d0e0      	beq.n	8001956 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	4bc6      	ldr	r3, [pc, #792]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4ac6      	ldr	r2, [pc, #792]	; (8001cb4 <HAL_RCC_OscConfig+0x684>)
 800199a:	4013      	ands	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	4bc3      	ldr	r3, [pc, #780]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a8:	4bc1      	ldr	r3, [pc, #772]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	0a19      	lsrs	r1, r3, #8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	061a      	lsls	r2, r3, #24
 80019b6:	4bbe      	ldr	r3, [pc, #760]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	e019      	b.n	80019f2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019be:	4bbc      	ldr	r3, [pc, #752]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4bbb      	ldr	r3, [pc, #748]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019c4:	49bc      	ldr	r1, [pc, #752]	; (8001cb8 <HAL_RCC_OscConfig+0x688>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb0d 	bl	8000fe8 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb08 	bl	8000fe8 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e19a      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019e6:	4bb2      	ldr	r3, [pc, #712]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2208      	movs	r2, #8
 80019f8:	4013      	ands	r3, r2
 80019fa:	d036      	beq.n	8001a6a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d019      	beq.n	8001a38 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a04:	4baa      	ldr	r3, [pc, #680]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a08:	4ba9      	ldr	r3, [pc, #676]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff faea 	bl	8000fe8 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fae5 	bl	8000fe8 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e177      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a2c:	4ba0      	ldr	r3, [pc, #640]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a30:	2202      	movs	r2, #2
 8001a32:	4013      	ands	r3, r2
 8001a34:	d0f1      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3ea>
 8001a36:	e018      	b.n	8001a6a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	4b9d      	ldr	r3, [pc, #628]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3c:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fad0 	bl	8000fe8 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff facb 	bl	8000fe8 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e15d      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a60:	4b93      	ldr	r3, [pc, #588]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1f1      	bne.n	8001a4e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x446>
 8001a74:	e0ae      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2023      	movs	r0, #35	; 0x23
 8001a78:	183b      	adds	r3, r7, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	055b      	lsls	r3, r3, #21
 8001a86:	4013      	ands	r3, r2
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0549      	lsls	r1, r1, #21
 8001a94:	430a      	orrs	r2, r1
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <HAL_RCC_OscConfig+0x68c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	4b84      	ldr	r3, [pc, #528]	; (8001cbc <HAL_RCC_OscConfig+0x68c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_RCC_OscConfig+0x68c>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fa96 	bl	8000fe8 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fa91 	bl	8000fe8 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e123      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <HAL_RCC_OscConfig+0x68c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4cc>
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0049      	lsls	r1, r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
 8001afa:	e031      	b.n	8001b60 <HAL_RCC_OscConfig+0x530>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4ee>
 8001b04:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b08:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b0a:	496b      	ldr	r1, [pc, #428]	; (8001cb8 <HAL_RCC_OscConfig+0x688>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b10:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b16:	496a      	ldr	r1, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x690>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b1c:	e020      	b.n	8001b60 <HAL_RCC_OscConfig+0x530>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	23a0      	movs	r3, #160	; 0xa0
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d10e      	bne.n	8001b48 <HAL_RCC_OscConfig+0x518>
 8001b2a:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	00c9      	lsls	r1, r1, #3
 8001b34:	430a      	orrs	r2, r1
 8001b36:	651a      	str	r2, [r3, #80]	; 0x50
 8001b38:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3c:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0049      	lsls	r1, r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	651a      	str	r2, [r3, #80]	; 0x50
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x530>
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4c:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b4e:	495a      	ldr	r1, [pc, #360]	; (8001cb8 <HAL_RCC_OscConfig+0x688>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b58:	4b55      	ldr	r3, [pc, #340]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b5a:	4959      	ldr	r1, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x690>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d015      	beq.n	8001b94 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fa3e 	bl	8000fe8 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fa39 	bl	8000fe8 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_RCC_OscConfig+0x694>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0ca      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0ef      	beq.n	8001b72 <HAL_RCC_OscConfig+0x542>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa28 	bl	8000fe8 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fa23 	bl	8000fe8 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_RCC_OscConfig+0x694>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0b4      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bbe:	2323      	movs	r3, #35	; 0x23
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001bce:	493e      	ldr	r1, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x698>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_OscConfig+0x5ae>
 8001bdc:	e09d      	b.n	8001d1a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5b6>
 8001be4:	e076      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d145      	bne.n	8001c7a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_RCC_OscConfig+0x69c>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f9f5 	bl	8000fe8 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f9f0 	bl	8000fe8 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e082      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4a2a      	ldr	r2, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x6a0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0449      	lsls	r1, r1, #17
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f9ca 	bl	8000fe8 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff f9c5 	bl	8000fe8 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e057      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	049b      	lsls	r3, r3, #18
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x62a>
 8001c78:	e04f      	b.n	8001d1a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001c80:	4912      	ldr	r1, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x69c>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f9af 	bl	8000fe8 <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f9aa 	bl	8000fe8 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e03c      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ca2:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_RCC_OscConfig+0x680>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	049b      	lsls	r3, r3, #18
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x660>
 8001cae:	e034      	b.n	8001d1a <HAL_RCC_OscConfig+0x6ea>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	ffff1fff 	.word	0xffff1fff
 8001cb8:	fffffeff 	.word	0xfffffeff
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	fffffbff 	.word	0xfffffbff
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	feffffff 	.word	0xfeffffff
 8001cd0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x6f4>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d10f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	23f0      	movs	r3, #240	; 0xf0
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b00a      	add	sp, #40	; 0x28
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e128      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d91e      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b93      	ldr	r3, [pc, #588]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b90      	ldr	r3, [pc, #576]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff f944 	bl	8000fe8 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7ff f93f 	bl	8000fe8 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a8a      	ldr	r2, [pc, #552]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e109      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	22f0      	movs	r2, #240	; 0xf0
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
 8001db0:	e089      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d120      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0e1      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	049b      	lsls	r3, r3, #18
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d114      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0d5      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0ca      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df8:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0c2      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f8e4 	bl	8000fe8 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d111      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7ff f8db 	bl	8000fe8 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0a5      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e42:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	220c      	movs	r2, #12
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d1ef      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x106>
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d111      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7ff f8c5 	bl	8000fe8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e08f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	220c      	movs	r2, #12
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d1ef      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x132>
 8001e7a:	e024      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d11b      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e86:	f7ff f8af 	bl	8000fe8 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e079      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x15e>
 8001ea6:	e00e      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7ff f89e 	bl	8000fe8 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e068      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ebc:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d21e      	bcs.n	8001f12 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee6:	f7ff f87f 	bl	8000fe8 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	e009      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7ff f87a 	bl	8000fe8 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_RCC_ClockConfig+0x274>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e044      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d1ee      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x27c>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2208      	movs	r2, #8
 8001f36:	4013      	ands	r3, r2
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_RCC_ClockConfig+0x280>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00da      	lsls	r2, r3, #3
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f50:	f000 f832 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f54:	0001      	movs	r1, r0
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_RCC_ClockConfig+0x284>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	000a      	movs	r2, r1
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x288>)
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_ClockConfig+0x28c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	250b      	movs	r5, #11
 8001f72:	197c      	adds	r4, r7, r5
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7fe fff1 	bl	8000f5c <HAL_InitTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f7e:	197b      	adds	r3, r7, r5
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f86:	197b      	adds	r3, r7, r5
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bdb0      	pop	{r4, r5, r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	fffff8ff 	.word	0xfffff8ff
 8001fa8:	ffffc7ff 	.word	0xffffc7ff
 8001fac:	0800294c 	.word	0x0800294c
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d014      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fce:	d900      	bls.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001fd0:	e07b      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x112>
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x24>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fda:	e076      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fdc:	4b44      	ldr	r3, [pc, #272]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fea:	e07c      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff0:	e079      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_GetSysClockFreq+0x144>)
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff6:	e076      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	0c9a      	lsrs	r2, r3, #18
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	401a      	ands	r2, r3
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_GetSysClockFreq+0x148>)
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	0d9a      	lsrs	r2, r3, #22
 800200a:	2303      	movs	r3, #3
 800200c:	4013      	ands	r3, r2
 800200e:	3301      	adds	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	4013      	ands	r3, r2
 800201c:	d01a      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_RCC_GetSysClockFreq+0x144>)
 8002028:	2300      	movs	r3, #0
 800202a:	69b8      	ldr	r0, [r7, #24]
 800202c:	69f9      	ldr	r1, [r7, #28]
 800202e:	f7fe f917 	bl	8000260 <__aeabi_lmul>
 8002032:	0002      	movs	r2, r0
 8002034:	000b      	movs	r3, r1
 8002036:	0010      	movs	r0, r2
 8002038:	0019      	movs	r1, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f7fe f8eb 	bl	8000220 <__aeabi_uldivmod>
 800204a:	0002      	movs	r2, r0
 800204c:	000b      	movs	r3, r1
 800204e:	0013      	movs	r3, r2
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
 8002052:	e037      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d01a      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002068:	2300      	movs	r3, #0
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	f7fe f8f7 	bl	8000260 <__aeabi_lmul>
 8002072:	0002      	movs	r2, r0
 8002074:	000b      	movs	r3, r1
 8002076:	0010      	movs	r0, r2
 8002078:	0019      	movs	r1, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f7fe f8cb 	bl	8000220 <__aeabi_uldivmod>
 800208a:	0002      	movs	r2, r0
 800208c:	000b      	movs	r3, r1
 800208e:	0013      	movs	r3, r2
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
 8002092:	e017      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	0018      	movs	r0, r3
 8002098:	2300      	movs	r3, #0
 800209a:	0019      	movs	r1, r3
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800209e:	2300      	movs	r3, #0
 80020a0:	f7fe f8de 	bl	8000260 <__aeabi_lmul>
 80020a4:	0002      	movs	r2, r0
 80020a6:	000b      	movs	r3, r1
 80020a8:	0010      	movs	r0, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	001c      	movs	r4, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	001d      	movs	r5, r3
 80020b4:	0022      	movs	r2, r4
 80020b6:	002b      	movs	r3, r5
 80020b8:	f7fe f8b2 	bl	8000220 <__aeabi_uldivmod>
 80020bc:	0002      	movs	r2, r0
 80020be:	000b      	movs	r3, r1
 80020c0:	0013      	movs	r3, r2
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80020c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020c8:	e00d      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	2207      	movs	r2, #7
 80020d2:	4013      	ands	r3, r2
 80020d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3301      	adds	r3, #1
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0212      	lsls	r2, r2, #8
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b00e      	add	sp, #56	; 0x38
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	003d0900 	.word	0x003d0900
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	0800295c 	.word	0x0800295c

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800210c:	2017      	movs	r0, #23
 800210e:	183b      	adds	r3, r7, r0
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2220      	movs	r2, #32
 800211a:	4013      	ands	r3, r2
 800211c:	d100      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800211e:	e0c7      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002120:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4013      	ands	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800212e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	0549      	lsls	r1, r1, #21
 8002136:	430a      	orrs	r2, r1
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800213a:	183b      	adds	r3, r7, r0
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b7d      	ldr	r3, [pc, #500]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d11a      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214c:	4b7a      	ldr	r3, [pc, #488]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b79      	ldr	r3, [pc, #484]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0049      	lsls	r1, r1, #1
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7fe ff45 	bl	8000fe8 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	e008      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe ff40 	bl	8000fe8 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0d9      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b70      	ldr	r3, [pc, #448]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d0f0      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002182:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	039b      	lsls	r3, r3, #14
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	039b      	lsls	r3, r3, #14
 8002196:	4013      	ands	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	429a      	cmp	r2, r3
 800219c:	d013      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	23c0      	movs	r3, #192	; 0xc0
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	401a      	ands	r2, r3
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d10a      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	401a      	ands	r2, r3
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	429a      	cmp	r2, r3
 80021c0:	d101      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0b1      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03b      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	4013      	ands	r3, r2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d033      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	d02e      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	4a51      	ldr	r2, [pc, #324]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fc:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	0309      	lsls	r1, r1, #12
 8002206:	430a      	orrs	r2, r1
 8002208:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002210:	494b      	ldr	r1, [pc, #300]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002212:	400a      	ands	r2, r1
 8002214:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4013      	ands	r3, r2
 8002224:	d014      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fedf 	bl	8000fe8 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800222e:	e009      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe feda 	bl	8000fe8 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4a42      	ldr	r2, [pc, #264]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e072      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d0ef      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	23c0      	movs	r3, #192	; 0xc0
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	401a      	ands	r2, r3
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	429a      	cmp	r2, r3
 800226a:	d10c      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a35      	ldr	r2, [pc, #212]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	23c0      	movs	r3, #192	; 0xc0
 800227c:	039b      	lsls	r3, r3, #14
 800227e:	401a      	ands	r2, r3
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002288:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	401a      	ands	r2, r3
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002296:	430a      	orrs	r2, r1
 8002298:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229a:	2317      	movs	r3, #23
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022aa:	4928      	ldr	r1, [pc, #160]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	220c      	movs	r2, #12
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2204      	movs	r2, #4
 80022d4:	4013      	ands	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2208      	movs	r2, #8
 80022f2:	4013      	ands	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002306:	430a      	orrs	r2, r1
 8002308:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	4013      	ands	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800231a:	4013      	ands	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002324:	430a      	orrs	r2, r1
 8002326:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b006      	add	sp, #24
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	fffcffff 	.word	0xfffcffff
 8002340:	fff7ffff 	.word	0xfff7ffff
 8002344:	00001388 	.word	0x00001388
 8002348:	ffcfffff 	.word	0xffcfffff
 800234c:	efffffff 	.word	0xefffffff
 8002350:	fffff3ff 	.word	0xfffff3ff
 8002354:	ffffcfff 	.word	0xffffcfff
 8002358:	fff3ffff 	.word	0xfff3ffff

0800235c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07b      	b.n	8002466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	2382      	movs	r3, #130	; 0x82
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	429a      	cmp	r2, r3
 8002380:	d009      	beq.n	8002396 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
 8002388:	e005      	b.n	8002396 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2251      	movs	r2, #81	; 0x51
 80023a0:	5c9b      	ldrb	r3, [r3, r2]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2250      	movs	r2, #80	; 0x50
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fe fcf2 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2251      	movs	r2, #81	; 0x51
 80023bc:	2102      	movs	r1, #2
 80023be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	2382      	movs	r3, #130	; 0x82
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	2384      	movs	r3, #132	; 0x84
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	400b      	ands	r3, r1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2102      	movs	r1, #2
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2101      	movs	r1, #1
 8002402:	400b      	ands	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6999      	ldr	r1, [r3, #24]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	400b      	ands	r3, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	2138      	movs	r1, #56	; 0x38
 8002418:	400b      	ands	r3, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	400b      	ands	r3, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	0011      	movs	r1, r2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	2204      	movs	r2, #4
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2210      	movs	r2, #16
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2251      	movs	r2, #81	; 0x51
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b088      	sub	sp, #32
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	1dbb      	adds	r3, r7, #6
 800247c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800247e:	231f      	movs	r3, #31
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2250      	movs	r2, #80	; 0x50
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_SPI_Transmit+0x26>
 8002490:	2302      	movs	r3, #2
 8002492:	e145      	b.n	8002720 <HAL_SPI_Transmit+0x2b2>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2250      	movs	r2, #80	; 0x50
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800249c:	f7fe fda4 	bl	8000fe8 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80024a4:	2316      	movs	r3, #22
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	1dba      	adds	r2, r7, #6
 80024aa:	8812      	ldrh	r2, [r2, #0]
 80024ac:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2251      	movs	r2, #81	; 0x51
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d004      	beq.n	80024c4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80024c2:	e126      	b.n	8002712 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_SPI_Transmit+0x64>
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80024d2:	231f      	movs	r3, #31
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80024da:	e11a      	b.n	8002712 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2251      	movs	r2, #81	; 0x51
 80024e0:	2103      	movs	r1, #3
 80024e2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1dba      	adds	r2, r7, #6
 80024f4:	8812      	ldrh	r2, [r2, #0]
 80024f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1dba      	adds	r2, r7, #6
 80024fc:	8812      	ldrh	r2, [r2, #0]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	429a      	cmp	r2, r3
 8002528:	d110      	bne.n	800254c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	01c9      	lsls	r1, r1, #7
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	4013      	ands	r3, r2
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d007      	beq.n	800256a <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	429a      	cmp	r2, r3
 8002574:	d152      	bne.n	800261c <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_SPI_Transmit+0x11a>
 800257e:	2316      	movs	r3, #22
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d143      	bne.n	8002610 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	1c9a      	adds	r2, r3, #2
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ac:	e030      	b.n	8002610 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2202      	movs	r2, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d112      	bne.n	80025e2 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	86da      	strh	r2, [r3, #54]	; 0x36
 80025e0:	e016      	b.n	8002610 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e2:	f7fe fd01 	bl	8000fe8 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d802      	bhi.n	80025f8 <HAL_SPI_Transmit+0x18a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_SPI_Transmit+0x190>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80025fe:	231f      	movs	r3, #31
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2203      	movs	r2, #3
 8002604:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2251      	movs	r2, #81	; 0x51
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
          goto error;
 800260e:	e080      	b.n	8002712 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1c9      	bne.n	80025ae <HAL_SPI_Transmit+0x140>
 800261a:	e053      	b.n	80026c4 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_SPI_Transmit+0x1c0>
 8002624:	2316      	movs	r3, #22
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d145      	bne.n	80026ba <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002654:	e031      	b.n	80026ba <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d113      	bne.n	800268c <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36
 800268a:	e016      	b.n	80026ba <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268c:	f7fe fcac 	bl	8000fe8 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d802      	bhi.n	80026a2 <HAL_SPI_Transmit+0x234>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_SPI_Transmit+0x23a>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d108      	bne.n	80026ba <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80026a8:	231f      	movs	r3, #31
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2203      	movs	r2, #3
 80026ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2251      	movs	r2, #81	; 0x51
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80026b8:	e02b      	b.n	8002712 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1c8      	bne.n	8002656 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f8ba 	bl	8002844 <SPI_EndRxTxTransaction>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002700:	231f      	movs	r3, #31
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e003      	b.n	8002712 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2251      	movs	r2, #81	; 0x51
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2250      	movs	r2, #80	; 0x50
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b008      	add	sp, #32
 8002726:	bd80      	pop	{r7, pc}

08002728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002738:	f7fe fc56 	bl	8000fe8 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002748:	f7fe fc4e 	bl	8000fe8 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	0d1b      	lsrs	r3, r3, #20
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	4353      	muls	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275e:	e058      	b.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	d055      	beq.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002766:	f7fe fc3f 	bl	8000fe8 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	429a      	cmp	r2, r3
 8002774:	d902      	bls.n	800277c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d142      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	21e0      	movs	r1, #224	; 0xe0
 8002788:	438a      	bics	r2, r1
 800278a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	2382      	movs	r3, #130	; 0x82
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	429a      	cmp	r2, r3
 8002796:	d113      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	438a      	bics	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d110      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	491a      	ldr	r1, [pc, #104]	; (8002840 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	0189      	lsls	r1, r1, #6
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2251      	movs	r2, #81	; 0x51
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2250      	movs	r2, #80	; 0x50
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e017      	b.n	8002832 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3b01      	subs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4013      	ands	r3, r2
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	425a      	negs	r2, r3
 8002822:	4153      	adcs	r3, r2
 8002824:	b2db      	uxtb	r3, r3
 8002826:	001a      	movs	r2, r3
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d197      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b008      	add	sp, #32
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	20000000 	.word	0x20000000
 8002840:	ffffdfff 	.word	0xffffdfff

08002844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <SPI_EndRxTxTransaction+0x84>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	491d      	ldr	r1, [pc, #116]	; (80028cc <SPI_EndRxTxTransaction+0x88>)
 8002856:	0018      	movs	r0, r3
 8002858:	f7fd fc56 	bl	8000108 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	001a      	movs	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	189b      	adds	r3, r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	2382      	movs	r3, #130	; 0x82
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	429a      	cmp	r2, r3
 8002878:	d112      	bne.n	80028a0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	0013      	movs	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	f7ff ff4e 	bl	8002728 <SPI_WaitFlagStateUntilTimeout>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d016      	beq.n	80028be <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	2220      	movs	r2, #32
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e00f      	b.n	80028c0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d0f2      	beq.n	80028a0 <SPI_EndRxTxTransaction+0x5c>
 80028ba:	e000      	b.n	80028be <SPI_EndRxTxTransaction+0x7a>
        break;
 80028bc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b006      	add	sp, #24
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000
 80028cc:	016e3600 	.word	0x016e3600

080028d0 <memset>:
 80028d0:	0003      	movs	r3, r0
 80028d2:	1882      	adds	r2, r0, r2
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	7019      	strb	r1, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	2600      	movs	r6, #0
 80028e4:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x38>)
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	2600      	movs	r6, #0
 80028f2:	f000 f819 	bl	8002928 <_init>
 80028f6:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <__libc_init_array+0x40>)
 80028f8:	4d0a      	ldr	r5, [pc, #40]	; (8002924 <__libc_init_array+0x44>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	00b3      	lsls	r3, r6, #2
 8002906:	58eb      	ldr	r3, [r5, r3]
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	00b3      	lsls	r3, r6, #2
 8002910:	58eb      	ldr	r3, [r5, r3]
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002970 	.word	0x08002970
 800291c:	08002970 	.word	0x08002970
 8002920:	08002974 	.word	0x08002974
 8002924:	08002970 	.word	0x08002970

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
